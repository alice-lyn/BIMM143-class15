---
title: "Class13: RNASeq Analysis"
author: "Alice Lai (PID:A16799081)"
format: pdf
---

The data for today's lab comes from a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014). 

## Import Data 

```{r}
# install.packages("BiocManager")
# BiocManager::install()

# BiocManager::install("DESeq2")

# library(BiocManager)
# library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
head(metadata)
```


## Examine Data 

Q1. How many genes are in this dataset? 
```{r}
nrow(counts)
```
There are 38694 genes in the dataset. 


Q2. How many ‘control’ cell lines do we have? 
```{r}
sum(metadata$dex == "control")
table(metadata$dex)
```
There are 4 control cell lines. 


```{r}
colnames(counts) == metadata$id
```

If you want to know if all the elements of a vector are TRUE we can use the `all()` function 
```{r}
all(colnames(counts) == metadata$id)
```


## Analysis 

I want to compare all "control" and "treated" column. To do this I will find the average of each gene(row) in all "control" column. 
```{r}
control.inds <- metadata$dex == "control"
```

```{r}
control.counts <- counts[,control.inds]
```

Now find the mean count value per gene using the `apply()` function. 
```{r}
control.means <- apply(control.counts, 1, mean)
```

Now do the same for the "treated" column. 
```{r}
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
treated.means <- apply(treated.counts, 1, mean)
```

Put these two mean vectors together 
```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```

Let's have a look at the plot 
```{r}
plot(meancounts)
```
```{r}
plot(meancounts, log="xy")
```

We most often work with log2 units because they have a more simple interpretation. 
Here we calculate the log2 fold-change of treated/control values and add it to our wee data frame of results. 
```{r}
meancounts$log2fc <- log2(meancounts$treated.means / meancounts$control.means)

head(meancounts)
```

There are some answers like NaN (not a number) and -Inf (minus infinity) that are because there are zero-count genes in the dataset. 
```{r}
to.keep.inds <- (rowSums(meancounts[,1:2] == 0) == 0)

mycounts <- meancounts[to.keep.inds, ]
head(mycounts)
```

Q. How many genes do we have left after filtering the zero-count? 
```{r}
nrow(mycounts)
```

A common threshold for calling a gene "up" or "down" regulated is a log2 fold change of +2 or -2. 

Q. How many "up" regulated genes do we have? 
```{r}
sum(mycounts$log2fc >= 2)
```

Q. How many "down" regulated genes do we have? 
```{r}
sum(mycounts$log2fc <= -2)
```


## DESeq analysis 

We need to do this analysis properly with out inner stats person kept happy 
```{r}
#| message: false 
library(DESeq2) 
```

To use DESeq we need to get our input data in a very particular format 
```{r}
dds <- DESeqDataSetFromMatrix(countData = counts, 
                       colData = metadata, 
                       design = ~dex)
```

Run DESeq analysis 
```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
head(res)
```

I want to make a figure showing an overview of all my results to date. A plot of **log2 fold change** vs the **p-value** (adjusted p-value) 
```{r}
plot(res$log2FoldChange, -log(res$padj))

# Add some cut-off lines
abline(v=-2, col="red")
abline(v=2, col="red")
abline(h=-log(0.05), col="red")
```

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```





## Add annotation data 

we want to add on gene symbols (gene names) as well as other common identifiers from major databases for all our genes of interest. 

```{r}
# BiocManager::install("AnnotationDbi")
# BiocManager::install("org.Hs.eg.db")
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```
```{r}
head(res)
```

My IDs are in the `rownames(res)` and they are from ENSEMBL.
```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=rownames(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

We also want "GENENAME" and "ENTREZID"
```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="GENENAME",
                     keytype="ENSEMBL",
                     multiVals="first")

res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res),
                     column="ENTREZID",
                     keytype="ENSEMBL",
                     multiVals="first")
```

```{r}
head(res)
```

Let's save our results in a new csv file 
```{r}
write.csv(res, file="class13_results.csv")
```



## Pathway analysis 

```{r}
# BiocManager::install( c("pathview", "gage", "gageData") )
```

```{r}
#| message: false
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)

head(keggres$less)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```
![](hsa05310.pathview.png)
